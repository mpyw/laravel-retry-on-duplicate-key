name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - '3307:3306'
        env:
          MYSQL_DATABASE: testing
          MYSQL_USER: testing
          MYSQL_PASSWORD: testing
          MYSQL_ROOT_PASSWORD: testing
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=30s
          --health-retries=5
      postgres:
        image: postgres:13.3
        ports:
          - '5432:5432'
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: testing
          POSTGRES_PASSWORD: testing
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=30s
          --health-retries=5
      sqlsrv:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - '1433:1433'
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password!
        options: >-
          --name sqlsrv
          --health-cmd "echo quit | /opt/mssql-tools/bin/sqlcmd -S 127.0.0.1 -l 1 -U sa -P Password!"

    strategy:
      matrix:
        php: [8.1, '8.0', 7.4]
        lib:
          - { laravel: ^9.0 }
          - { laravel: ^8.0 }
          - { laravel: ^7.0, polyfill: '1' }
          - { laravel: ^6.0, polyfill: '1' }
        db: [mysql, pgsql, sqlite, sqlsrv]
        exclude:
          - { php: 8.1, lib: { laravel: ^7.0, polyfill: '1' }, db: mysql }
          - { php: 8.1, lib: { laravel: ^6.0, polyfill: '1' }, db: mysql }
          - { php: 7.4, lib: { laravel: ^9.0 }, db: mysql }
          - { php: 8.1, lib: { laravel: ^7.0, polyfill: '1' }, db: pgsql }
          - { php: 8.1, lib: { laravel: ^6.0, polyfill: '1' }, db: pgsql }
          - { php: 7.4, lib: { laravel: ^9.0 }, db: pgsql }
          - { php: 8.1, lib: { laravel: ^7.0, polyfill: '1' }, db: sqlite }
          - { php: 8.1, lib: { laravel: ^6.0, polyfill: '1' }, db: sqlite }
          - { php: 7.4, lib: { laravel: ^9.0 }, db: sqlite }
          - { php: 8.1, lib: { laravel: ^7.0, polyfill: '1' }, db: sqlsrv }
          - { php: 8.1, lib: { laravel: ^6.0, polyfill: '1' }, db: sqlsrv }
          - { php: 7.4, lib: { laravel: ^9.0 }, db: sqlsrv }

    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: xdebug

      - name: Set up MySQL
        if: matrix.db == 'mysql'
        run: |
          mysql \
            --host=127.0.0.1 \
            --port=3307 \
            --user=root \
            --password=testing <<< "
              ALTER USER 'testing'@'%' IDENTIFIED WITH mysql_native_password BY 'testing';
            "

      - name: Set up SQLServer
        if: matrix.db == 'sqlsrv'
        run: |
          docker exec sqlsrv \
            /opt/mssql-tools/bin/sqlcmd \
              -S 127.0.0.1 \
              -U sa \
              -P Password! \
              -Q "create database [testing]"

      - name: Adjust Package Versions
        run: |
          composer require "laravel/framework:${{ matrix.lib.laravel }}" --dev --no-update
          composer update

      - name: Prepare Database Config
        run: mv tests/config/database.github.php tests/config/database.php

      - name: Prepare Coverage Directory
        run: mkdir -p build/logs

      - name: Test
        run: vendor/bin/phpunit --coverage-clover build/logs/clover.xml
        env:
          DB: ${{ matrix.db }}
          ENABLE_POLYFILL: ${{ matrix.lib.polyfill }}

      - name: Upload Coverage
        uses: nick-invision/retry@v2
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: 'true'
          COVERALLS_FLAG_NAME: 'db:${{ matrix.db }} laravel:${{ matrix.lib.laravel }} php:${{ matrix.php }}'
        with:
          timeout_minutes: 1
          max_attempts: 3
          command: |
            composer global require php-coveralls/php-coveralls
            php-coveralls --coverage_clover=build/logs/clover.xml -v

  coverage-aggregation:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Aggregate Coverage
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
